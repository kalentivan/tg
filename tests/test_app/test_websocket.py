import asyncio
import logging
import os
from multiprocessing import Process
from uuid import uuid4

import pytest
import uvicorn
from aiohttp import ClientSession, WSMsgType
from sqlalchemy import text
from sqlalchemy.exc import ProgrammingError
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine

from app.auth.service import AuthService
from app.database import get_db
from app.dto import UserPwdDTO
from app.models.models import Chat, GroupMember, MessageRead, User
from app.models.models import Message
from main import app

logger = logging.getLogger(__name__)


def run_server():
    os.environ["TESTING"] = "true"
    uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")
    os.environ["TESTING"] = "false"


# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-—Å–æ–∫–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–≤–∏–∂–æ–∫, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—Ç –ø—Ä–æ—à–ª–æ–≥–æ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã even-loop
USER = os.getenv("TG_DB_USER")
PWD = os.getenv("TG_DB_PASSWORD")
HOST = os.getenv("TG_DB_HOST")
PORT = os.getenv("TG_DB_PORT")
TEST_HOST = "127.0.0.1:8000"
BD_NAME = os.getenv("TG_DB_TEST_NAME")
TEST_DATABASE_URL = f"postgresql+asyncpg://{USER}:{PWD}@{HOST}:{PORT}/{BD_NAME}"
engine = create_async_engine(TEST_DATABASE_URL, echo=False)
test_engine = create_async_engine(TEST_DATABASE_URL, echo=False)


@pytest.fixture(scope="function")
async def db_session_factory():
    AsyncSessionLocal = async_sessionmaker(test_engine, class_=AsyncSession, expire_on_commit=False)
    yield AsyncSessionLocal
    await test_engine.dispose()  # –û—á–∏—â–∞–µ–º –¥–≤–∏–∂–æ–∫ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤


@pytest.fixture(scope="function")
async def start_server(db_session_factory):
    proc = Process(target=run_server, daemon=True)
    proc.start()
    await wait_load_db(db_session_factory)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ–∫–∞ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä
    await asyncio.sleep(10)  # –Ω–∞–¥–æ –µ—â–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å, –∏–Ω–∞—á–µ –ø–∞–¥–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—ã
    yield
    proc.terminate()


async def wait_load_db(db_session_factory):
    max_attempts = 10
    attempt = 0
    session_ready = False
    tables = ["users", "messages", "group_members", "chats", "tokens", "message_reads"]
    while attempt < max_attempts and not session_ready:
        try:
            async with db_session_factory() as session:
                for table in tables:
                    await session.execute(text(f"SELECT 1 FROM information_schema.tables WHERE table_name = '{table}'"))
                session_ready = True
        except (ConnectionError, ProgrammingError):
            attempt += 1
            await asyncio.sleep(1)

    if not session_ready:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥")


@pytest.fixture
async def ws_db_session(start_server, db_session_factory):
    async with db_session_factory() as session:
        yield session
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        await wait_load_db(db_session_factory)
        await asyncio.sleep(0.5)
        for table in ["message_reads", "messages", "group_members", "chats", "users", "tokens"]:
            await session.execute(text(f"TRUNCATE TABLE {table} CASCADE"))
        await session.commit()
        await session.close()


# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å get_db –¥–ª—è —Ç–µ—Å—Ç–æ–≤
async def override_get_db(db_session_factory):
    async with db_session_factory() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise


@pytest.fixture(autouse=True)
def override_dependency(db_session_factory):
    app.dependency_overrides[get_db] = lambda: override_get_db(db_session_factory)
    yield
    app.dependency_overrides.clear()


# –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–≤–∏—Å–∏–º—ã –æ—Ç ws_db_session(start_server)
@pytest.fixture
async def ws_test_user(ws_db_session):
    if user := await User.first(email="test@example.com", session=ws_db_session):
        return user
    user_data = UserPwdDTO(
        username="testuser",
        email="test@example.com",
        password="test123"
    )
    auth_service = AuthService()
    user, tokens = await auth_service.register(user_data, session=ws_db_session)
    return user


@pytest.fixture
async def ws_test_user2(ws_db_session):
    if user := await User.first(email="test2@example.com", session=ws_db_session):
        return user
    user_data = UserPwdDTO(
        username="testuser2",
        email="test2@example.com",
        password="test123"
    )
    auth_service = AuthService()
    user, tokens = await auth_service.register(user_data, session=ws_db_session)
    await ws_db_session.refresh(user)
    return user


@pytest.fixture
async def ws_group_chat(ws_db_session, ws_test_user, ws_test_user2):
    if not (chat := await Chat.first(name="Test Group", session=ws_db_session)):
        chat = Chat(
            name="Test Group",
            is_group=True,
        )
    chat.is_group = True
    ws_db_session.add(chat)
    await ws_db_session.commit()
    await ws_db_session.refresh(chat)

    if not await GroupMember.first(user_id=ws_test_user.id, chat_id=chat.id, session=ws_db_session):
        ws_db_session.add(GroupMember(user_id=ws_test_user.id, chat_id=chat.id, is_admin=True))
    if not await GroupMember.first(user_id=ws_test_user2.id, chat_id=chat.id, session=ws_db_session):
        ws_db_session.add(GroupMember(user_id=ws_test_user2.id, chat_id=chat.id, is_admin=False))
    await ws_db_session.commit()
    return chat


@pytest.fixture
async def ws_personal_chat(ws_db_session, ws_test_user, ws_test_user2):
    chat = await Chat.create(
        name=None,
        is_group=False,
        session=ws_db_session
    )
    ws_db_session.add(GroupMember(user_id=ws_test_user.id, chat_id=chat.id, is_admin=True))
    ws_db_session.add(GroupMember(user_id=ws_test_user2.id, chat_id=chat.id))
    await ws_db_session.commit()
    return chat


@pytest.fixture
async def ws_auth_headers(ws_test_user):
    auth_service = AuthService()
    payload = {"device_id": str(uuid4())}
    token = auth_service._jwt_auth.generate_access_token(subject=str(ws_test_user.id), payload=payload)
    return {"Authorization": f"Bearer {token}"}


@pytest.mark.asyncio
async def test_websocket_connect(start_server, ws_db_session, ws_test_user, ws_personal_chat):
    auth_service = AuthService()
    payload = {"device_id": str(uuid4())}
    token = auth_service._jwt_auth.generate_access_token(subject=str(ws_test_user.id), payload=payload)
    auth_headers = {"Authorization": f"Bearer {token}"}
    uri = f"ws://{TEST_HOST}/ws/{ws_personal_chat.id}"
    async with ClientSession() as session:
        async with session.ws_connect(uri, headers=auth_headers) as websocket:
            assert websocket.closed is False
            await websocket.close()


@pytest.mark.asyncio
async def test_websocket_connect_disconnect(start_server, ws_db_session, ws_auth_headers, ws_personal_chat, ws_test_user):
    uri = f"ws://{TEST_HOST}/ws/{ws_personal_chat.id}"
    try:
        async with ClientSession() as session:
            async with session.ws_connect(uri, headers=ws_auth_headers) as websocket:
                pass
    except ConnectionError as e:
        assert str(e).find("1008") != -1
    finally:
        await asyncio.sleep(0.1)


@pytest.mark.asyncio
async def test_websocket_send_message(start_server, ws_db_session, db_session_factory, ws_auth_headers, ws_personal_chat, ws_test_user):
    uri = f"ws://{TEST_HOST}/ws/{ws_personal_chat.id}"
    async with ClientSession() as session:
        async with session.ws_connect(uri, headers=ws_auth_headers) as websocket:
            message_uuid = uuid4()
            await asyncio.wait_for(websocket.send_json({
                "action": "send_message",
                "text": "Test message",
                "message_id": str(message_uuid),
                "chat_id": str(ws_personal_chat.id),
            }), timeout=2.0)
            print(f"üîÑ –ñ–¥–µ–º")
            try:
                msg = await asyncio.wait_for(websocket.receive(), timeout=2.0)
                if msg.type == WSMsgType.TEXT:
                    response = msg.json()
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {response}")
                    assert response["text"] == "Test message"
                else:
                    print(f"üî¥ –ü–æ–ª—É—á–µ–Ω –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø: {msg.type}")
            except asyncio.TimeoutError:
                print("üî¥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
                assert False, "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
            await asyncio.sleep(1)
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            async with db_session_factory() as check_session:
                message = await Message.first(id=message_uuid, session=check_session)
                assert message is not None
                assert message.text == "Test message"
            await websocket.close()


@pytest.mark.asyncio
async def test_websocket_read_message_personal_chat(
        start_server, ws_db_session, db_session_factory, ws_auth_headers, ws_personal_chat, ws_test_user, ws_test_user2
):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.
    ws_test_user –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, ws_test_user2 —á–∏—Ç–∞–µ—Ç –µ–≥–æ.
    """
    uri = f"ws://{TEST_HOST}/ws/{ws_personal_chat.id}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ws_test_user
    async with ClientSession() as session:
        async with session.ws_connect(uri, headers=ws_auth_headers) as websocket:
            message_uuid = uuid4()
            await asyncio.wait_for(websocket.send_json({
                "action": "send_message",
                "text": "Test message for reading",
                "message_id": str(message_uuid),
                "chat_id": str(ws_personal_chat.id),
            }), timeout=2.0)
            print(f"üîÑ –ñ–¥–µ–º")
            try:
                msg = await asyncio.wait_for(websocket.receive(), timeout=2.0)
                if msg.type == WSMsgType.TEXT:
                    response = msg.json()
                    assert response["text"] == "Test message for reading"
                    assert response["message_id"] == str(message_uuid)
                else:
                    print(f"üî¥ –ü–æ–ª—É—á–µ–Ω –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø: {msg.type}")
            except asyncio.TimeoutError:
                print("üî¥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
                assert False, "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
            await websocket.close()

    # –î–∞—ë–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await asyncio.sleep(0.1)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è ws_test_user2
    auth_service = AuthService()
    payload = {"device_id": str(uuid4())}
    token = auth_service._jwt_auth.generate_access_token(subject=str(ws_test_user2.id), payload=payload)
    user2_headers = {"Authorization": f"Bearer {token}"}

    # ws_test_user2 –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∏ —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    async with ClientSession() as session:
        async with session.ws_connect(uri, headers=user2_headers) as websocket:
            await asyncio.wait_for(websocket.send_json({
                "action": "message_read",
                "message_id": str(message_uuid),
                "chat_id": str(ws_personal_chat.id),
            }), timeout=2.0)
            # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏
            logger.info(f"üîÑ –ñ–¥–µ–º")
            try:
                msg = await asyncio.wait_for(websocket.receive(), timeout=2.0)
                if msg.type == WSMsgType.TEXT:
                    response = msg.json()
                    if response.get("action") == "message_read":
                        assert response["message_id"] == str(message_uuid)
                        assert response["read_by_user_id"] == str(ws_test_user2.id)
                else:
                    logger.error(f"üî¥ –ü–æ–ª—É—á–µ–Ω –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø: {msg.type}")
            except asyncio.TimeoutError:
                logger.error("üî¥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
                assert False, "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            async with db_session_factory() as check_session:
                message = await Message.first(id=message_uuid, session=check_session)
                assert message is not None
                assert message.is_read is True

            await websocket.close()


@pytest.mark.asyncio
async def test_websocket_read_message_group_chat(
        start_server, ws_db_session, db_session_factory, ws_auth_headers, ws_group_chat, ws_test_user, ws_test_user2
):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.
    ws_test_user –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, ws_test_user2 —á–∏—Ç–∞–µ—Ç –µ–≥–æ.
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–ø–∏—Å—å –≤ MessageRead.
    """
    uri = f"ws://{TEST_HOST}/ws/{ws_group_chat.id}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ws_test_user
    async with ClientSession() as session:
        async with session.ws_connect(uri, headers=ws_auth_headers) as websocket:
            message_uuid = uuid4()
            await asyncio.wait_for(websocket.send_json({
                "action": "send_message",
                "text": "Test group message",
                "message_id": str(message_uuid),
                "chat_id": str(ws_group_chat.id),
            }), timeout=20.0)
            logger.info(f"üîÑ –ñ–¥–µ–º")
            try:
                msg = await asyncio.wait_for(websocket.receive(), timeout=2.0)
                if msg.type == WSMsgType.TEXT:
                    response = msg.json()
                    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {response}")
                    assert response["text"] == "Test group message"
                else:
                    logger.error(f"üî¥ –ü–æ–ª—É—á–µ–Ω –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø: {msg.type}")
            except asyncio.TimeoutError:
                logger.error("üî¥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
                assert False, "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"

            await websocket.close()

    # –î–∞—ë–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await asyncio.sleep(0.1)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è ws_test_user2
    auth_service = AuthService()
    payload = {"device_id": str(uuid4())}
    token = auth_service._jwt_auth.generate_access_token(subject=str(ws_test_user2.id), payload=payload)
    user2_headers = {"Authorization": f"Bearer {token}"}

    # ws_test_user2 –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∏ —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    async with ClientSession() as session:
        async with session.ws_connect(uri, headers=user2_headers) as websocket:
            await asyncio.wait_for(websocket.send_json({
                "action": "message_read",
                "message_id": str(message_uuid),
                "chat_id": str(ws_group_chat.id),
            }), timeout=10.0)
            logger.info(f"üîÑ –ñ–¥–µ–º")
            try:
                msg = await asyncio.wait_for(websocket.receive(), timeout=10.0)
                if msg.type == WSMsgType.TEXT:
                    response = msg.json()
                    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {response}")
                    assert response["message_id"] == str(message_uuid)
                    assert response.get("read_by_all") is True  # –¢–∞–∫ –∫–∞–∫ —Ç–æ–ª—å–∫–æ ws_test_user2 —á–∏—Ç–∞–µ—Ç
                else:
                    logger.info(f"üî¥ –ü–æ–ª—É—á–µ–Ω –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø: {msg.type}")
            except asyncio.TimeoutError:
                logger.error("üî¥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
                assert False, "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ MessageRead
            async with db_session_factory() as check_session:
                message_read = await MessageRead.first(
                    session=check_session,
                    message_id=message_uuid,
                    user_id=ws_test_user2.id
                )
                assert message_read is not None

            await websocket.close()


@pytest.mark.asyncio
async def test_websocket_read_message_invalid_id(
        start_server, ws_db_session, ws_auth_headers, ws_personal_chat, ws_test_user
):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º message_id.
    –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É.
    """
    uri = f"ws://{TEST_HOST}/ws/{ws_personal_chat.id}"

    async with ClientSession() as session:
        async with session.ws_connect(uri, headers=ws_auth_headers) as websocket:
            invalid_message_id = uuid4()
            await asyncio.wait_for(websocket.send_json({
                "action": "message_read",
                "message_id": str(invalid_message_id),
                "chat_id": str(ws_personal_chat.id),
            }), timeout=2.0)
            # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
            logger.info(f"üîÑ –ñ–¥–µ–º")
            try:
                msg = await asyncio.wait_for(websocket.receive(), timeout=2.0)
                if msg.type == WSMsgType.TEXT:
                    response = msg.json()
                    assert "error" in response
                    assert response["error"] == "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                else:
                    logger.error(f"üî¥ –ü–æ–ª—É—á–µ–Ω –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø: {msg.type}")
            except asyncio.TimeoutError:
                logger.error("üî¥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
                assert False, "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"

            await websocket.close()


@pytest.mark.asyncio
async def test_websocket_send_multiple_messages(
    start_server, ws_db_session, db_session_factory, ws_auth_headers, ws_personal_chat, ws_test_user
):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤ —á–∞—Ç.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket –∏ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    uri = f"ws://{TEST_HOST}/ws/{ws_personal_chat.id}"
    async with ClientSession() as session:
        async with session.ws_connect(uri, headers=ws_auth_headers) as websocket:
            assert not websocket.closed
            print(f"üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å {uri}")

            # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è UUID —Å–æ–æ–±—â–µ–Ω–∏–π
            message_uuids = []
            messages_to_send = [
                "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
                "–Ø —Ç—É—Ç –ø–æ–¥—É–º–∞–ª...",
                "–î–∞–≤–∞–π —Å–æ–∑–≤–æ–Ω–∏–º—Å—è!"
            ]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 0.5 —Å–µ–∫—É–Ω–¥—ã
            for msg_text in messages_to_send:
                message_uuid = uuid4()
                message_uuids.append(message_uuid)
                await websocket.send_json({
                    "action": "send_message",
                    "text": msg_text,
                    "chat_id": str(ws_personal_chat.id),
                    "message_id": str(message_uuid)
                })
                print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {msg_text} (UUID: {message_uuid})")
                await asyncio.sleep(0.5)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

            # –û–∂–∏–¥–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            received_messages = []
            try:
                for _ in range(len(messages_to_send)):
                    msg = await asyncio.wait_for(websocket.receive(), timeout=10.0)
                    if msg.type == WSMsgType.TEXT:
                        response = msg.json()
                        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {response}")
                        received_messages.append(response)
                    else:
                        print(f"üî¥ –ü–æ–ª—É—á–µ–Ω –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø: {msg.type}")
                        assert False, f"–û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø, –ø–æ–ª—É—á–µ–Ω: {msg.type}"
            except asyncio.TimeoutError:
                print("üî¥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
                assert False, "–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã
            for expected_text, received in zip(messages_to_send, received_messages):
                print(received)
                assert received["text"] == expected_text
                assert received["message_id"] in [str(uuid) for uuid in message_uuids]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await asyncio.sleep(0.1)  # –î–∞—ë–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            async with db_session_factory() as check_session:
                for msg_uuid, msg_text in zip(message_uuids, messages_to_send):
                    message = await Message.first(id=msg_uuid, session=check_session)
                    assert message is not None, f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ"
                    assert message.text == msg_text
                    assert message.chat_id == ws_personal_chat.id
                    assert message.sender_id == ws_test_user.id

            await websocket.close()
            print(f"üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
