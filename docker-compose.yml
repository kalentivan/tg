services:
  back:
    image: tg-back
    container_name: tg-back
    restart: always
    env_file:
      - .env  # Загружаем переменные из .env
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./stat:/app/stat
    depends_on:
      db:
        condition: service_healthy
    networks:
      - tg-net

  db:
    image: postgres:16
    container_name: tg-pgsql
    restart: always
    env_file:
      - .env  # Загружаем переменные из .env
    # ports:
    #   - 5432:5432
    volumes:
      - ./pgcheck:/var/lib/postgresql/data
      - /log:/log
      - ./backup.sql:/docker-entrypoint-initdb.d/backup.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 10s    # как часто проверять
      timeout: 5s      # максимальное время ожидания ответа
      retries: 5       # сколько раз подряд должно быть ОК
      start_period: 30s # сколько времени дать на начальную загрузку
    networks:
      - tg-net

#  pgbouncer:
#    image: edoburu/pgbouncer:v1.23.1-p3
#    container_name: tg-pgbouncer
#    restart: always
#    env_file:
#      - .env  # Загружаем переменные из .env
#    depends_on:
#      - db
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -h localhost -p 5432 || exit 1" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 10s
#    networks:
#      - tg-net

networks:
  tg-net:
    name: tg-net
    external: true
